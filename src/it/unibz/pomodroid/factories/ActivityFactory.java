package it.unibz.pomodroid.factories;

import it.unibz.pomodroid.persistency.Activity;
import it.unibz.pomodroid.persistency.DBHelper;

import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import it.unibz.pomodroid.exceptions.PomodroidException;

/**
 *  A class that saves all information about tickets it into the
 *  database. Each ticket taken from TRAC is checked. If some information
 *  are empty, the class provides some auto-generated values.
 * @author Daniel Graziotin 4801 <daniel.graziotin@stud-inf.unibz.it>
 * @author Thomas Schievenin 5701 <thomas.schievenin@stud-inf.unibz.it>
 * 
 */
public class ActivityFactory {

	final String autogen = "Autogenerated value";

	/**
	 * @param id
	 *            trac identifier
	 * @param deadLine
	 *            date within the work has be done
	 * @param attributes
	 *            list containing all information about one ticket
	 * @param dbHelper
	 *            reference to the database
	 */
	public int produce(Vector<HashMap<String, Object>> tickets,
			DBHelper dbHelper) throws PomodroidException {
		int ticketsNumber = 0;
		for (HashMap<String, Object> ticket : tickets) {
			fillEmptyFields(ticket);
			Activity activity = new Activity(0, new Date(), (Date) ticket
					.get("deadLine"), ticket.get("summary").toString(), ticket
					.get("description").toString(), ticket.get("origin")
					.toString(), (Integer) ticket.get("originId"), ticket.get(
					"priority").toString(), ticket.get("reporter").toString(),
					ticket.get("type").toString());

			if (!Activity.isPresent(activity.getOrigin(), activity
					.getOriginId(), dbHelper)) {
				activity.save(dbHelper);
				ticketsNumber++;
			}

		}

		return ticketsNumber;
	}

	/**
	 * @param id
	 *            trac identifier
	 * @param deadLine
	 *            date within the work has be done
	 * @param attributes
	 *            list containing all information about one ticket
	 * @param dbHelper
	 *            reference to the database
	 */
	public int produceTest(Vector<HashMap<String, Object>> tickets,
			DBHelper dbHelper) throws PomodroidException {
		int ticketsNumber = 0;
		for (HashMap<String, Object> ticket : tickets) {

			fillEmptyFields(ticket);

			Activity activity = new Activity(0, new Date(), (Date) ticket
					.get("deadLine"), ticket.get("summary").toString(), ticket
					.get("description").toString(), ticket.get("origin")
					.toString(), (Integer) ticket.get("originId"), ticket.get(
					"priority").toString(), ticket.get("reporter").toString(),
					ticket.get("type").toString());

			if (!Activity.isPresent(activity.getOrigin(), activity
					.getOriginId(), dbHelper)) {
				ticketsNumber++;
			}

		}

		return ticketsNumber;
	}

	/**
	 * @param ticket
	 * @return ticket
	 * @throws PomodroidException
	 * 
	 *             Checks if there are empty fields and fills them with a
	 *             default value
	 */
	private HashMap<String, Object> fillEmptyFields(
			HashMap<String, Object> ticket) throws PomodroidException {
		for (String key : ticket.keySet()) {
			if (isEmpty(ticket.get(key).toString()))
				ticket.put(key, autogen);
		}
		return ticket;
	}

	/**
	 * @param string
	 * @return
	 * @throws PomodroidException
	 * 
	 *             Checks whether a string is null or empty
	 */
	private boolean isEmpty(String string) throws PomodroidException {
		return (string.equals("") || string.equals(null));
	}

}
